name: "Make cross FPC"
author: "Doj"

inputs:
  target_os:
    required: true
  target_cpu:
    required: true
  opt:
    required: false
    default: ""
  prefix:
    required: false
    default: "${{ github.workspace }}/bundle-cross/installed"
  sources_dir:
    required: false
    default: "${{ github.workspace }}/fpc/src"
  crossopt:
    required: false
    default: ""
  fpc_bin:
    required: false
    default: "${{ github.workspace }}\\fpc\\installed\\bin\\i386-win32"

runs:
  using: "composite"
  steps:
    - if: always() && (runner.os == 'Windows')
      shell: bash
      run: echo -n "${{ inputs.fpc_bin }};${{ inputs.fpc_bin }}" >PATH.txt

    #
    # https://wiki.freepascal.org/WebAssembly/Compiler
    #
    - if: always() && (runner.os == 'Linux') && (inputs.target_cpu == 'wasm')
      shell: bash
      run: |
           sudo apt-get install lld-12
           ln -sf /usr/lib/llvm-12/bin/wasm-ld "${{ github.workspace }}/tempbin/wasm32-wasi-wasm-ld"
           ln -sf /usr/lib/llvm-12/bin/wasm-ld "${{ github.workspace }}/tempbin/wasm32-embedded-wasm-ld"

    - if: always() && (runner.os == 'Windows') && (inputs.target_os == 'wasm')
      shell: bash
      run: |
           choco install llvm --params="'/InstallationPath:${{ github.workspace }}\llvm\'"
           mklink ${{ github.workspace }}/tempbin/wasm32-wasi-wasm-ld.exe     ${{ github.workspace }}/llvm/wasm-ld.exe
           mklink ${{ github.workspace }}/tempbin/wasm32-embedded-wasm-ld.exe ${{ github.workspace }}/llvm/wasm-ld.exe

    - if: always() && (runner.os == 'macOS') && (inputs.target_cpu == 'wasm')
      shell: bash
      run: |
           brew update
           brew install llvm@11
           ln -sf /opt/local/bin/wasm-ld-mp-11 "${{ github.workspace }}/tempbin/wasm32-wasi-wasm-ld"
           ln -sf /opt/local/bin/wasm-ld-mp-11 "${{ github.workspace }}/tempbin/wasm32-embedded-wasm-ld"

    - if: always() && (runner.os == 'Linux') && (inputs.target_os == 'linux') && (inputs.target_cpu == 'arm')
      shell: bash
      run: |
           sudo apt-get install -y alien libncurses5-dev libxpm4 libgtk2.0-dev

    - if: always() && (runner.os == 'Windows') && (inputs.target_os == 'android-old') && (inputs.target_cpu == 'arm')
      shell: bash
      run: |
           choco install android-ndk --params="'/InstallationPath:${{ github.workspace }}\Android\'"
           ls "${{ github.workspace }}\\Android\\"
           ls "${{ github.workspace }}\\Android\\android-ndk-r25b\\toolchains\\"
           ls "${{ github.workspace }}\\Android\\android-ndk-r25b\\toolchains\\llvm\\"
           ls "${{ github.workspace }}\\Android\\android-ndk-r25b\\toolchains\\llvm\\prebuilt\\"
           ls "${{ github.workspace }}\\Android\\android-ndk-r25b\\toolchains\\llvm\\prebuilt\\windows-x86_64\\"
           echo "${{ github.workspace }}\\Android\\android-ndk-r25b\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
           echo -n ";${{ github.workspace }}\\Android\\android-ndk-r25b\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin" >>"${{ github.workspace }}\\PATH.txt"
           ls "${{ github.workspace }}\\Android\\android-ndk-r25b\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin"

    - if: always() && (runner.os == 'Windows') && (inputs.target_os == 'android') && (inputs.target_cpu == 'arm')
      uses: nttld/setup-ndk@v1
      with:
          ndk-version: r25b

    - if: always() && (runner.os == 'Windows')
      id: windows_path
      shell: bash
      run: |
          echo %PATH%
          cat "${{ github.workspace }}\\PATH.txt"
          where pwd
          where make
          where fpc
          cat "${{ github.workspace }}\\PATH.txt"
          echo "path=$(cat PATH.txt)" >>$GITHUB_OUTPUT

    - if: always() && (runner.os == 'Windows')
      working-directory: "${{ inputs.sources_dir }}"
      shell: bash
      run: |
           "${{ inputs.fpc_bin }}\\make.exe" clean all crossinstall OS_TARGET=${{ inputs.target_os }} CPU_TARGET=${{ inputs.target_cpu }} PREFIX="${{ inputs.prefix }}" CROSSOPT="${{ inputs.crossopt }}" OPT="${{ inputs.opt }}" PATH="${{ steps.windows_path.outputs.path }}"
           echo "${{ inputs.target_os }}-${{ inputs.target_cpu }}" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"
           echo "* ${{ inputs.target_os }}-${{ inputs.target_cpu }}" >>$GITHUB_STEP_SUMMARY

    - if: always() && (runner.os != 'Windows')
      working-directory: "${{ inputs.sources_dir }}"
      shell: bash
      run: |
           make clean all crossinstall OS_TARGET=${{ inputs.target_os }} CPU_TARGET=${{ inputs.target_cpu }} PREFIX="${{ inputs.prefix }}" CROSSOPT="${{ inputs.crossopt }}" OPT="${{ inputs.opt }}"
           echo "${{ inputs.target_os }}-${{ inputs.target_cpu }}" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"
           echo "* ${{ inputs.target_os }}-${{ inputs.target_cpu }}" >>$GITHUB_STEP_SUMMARY

    - shell: bash
      run: |
           echo >>"${{ github.workspace }}/bundle-cross/fpc.cfg"
           echo "# ${{ inputs.target_cpu  }}-${{ inputs.target_os  }}" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"
           echo "#IFDEF ${{ inputs.target_os  }}" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"
           echo "#IFDEF cpu${{ inputs.target_cpu }}" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"

    - shell: bash
      run: |
           echo "#ENDIF" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"
           echo "#ENDIF" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"
