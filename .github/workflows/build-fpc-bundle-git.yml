name: Build FPC bundle from GIT
run-name: "Build FPC for ${{ github.event.inputs.os }}"

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'GitHub environment (e.g. ubuntu-latest, windows-latest, macos-latest)'
        required: true
      fpc:
        description: 'Compiler version ("system" is for installing FPC from packet manager)'
        required: false
        default: 'system'
      fpc_opt:
        description: 'Additional options for build process'
        required: false
        default: ''
      git_url:
        description: 'GIT url of sources'
        required: false
        default: 'https://gitlab.com/freepascal.org/fpc/source.git'
      git_branch:
        description: 'Branch'
        required: false
        default: 'main'
      bundle_name:
        description: 'Bundle name'
        required: false
        default: 'bundle'
      cross_compilers:
        description: 'Build cross compilers'
        required: false
        default: 'true'
      fpc_version:
        description: 'FPC version'
        required: false
        default: '3.2.3'
jobs:
  Build-Bundle:
    name: "Build FPC for ${{ github.event.inputs.os }} from ${{ github.event.inputs.git_url }}"
    runs-on: ${{ github.event.inputs.os }}
    steps:
      - name: Install Free Pascal Compiler (apt-get)
        if: (runner.os == 'Linux') && (github.event.inputs.fpc == 'system')
        run: sudo apt-get install fpc

      - name: Install Free Pascal Compiler (choco)
        if: (runner.os == 'Windows') && (github.event.inputs.fpc == 'system')
        run: |
          choco install freepascal --yes
          refreshenv

      - name: Workaround for missed PATH settings (choco)
        if: (runner.os == 'Windows') && (github.event.inputs.fpc == 'system')
        run: |
          ls "C:\\tools\\freepascal"
          ls "C:\\tools\\freepascal\\bin"
          ls "C:\\tools\\freepascal\\bin\\i386-win32"
          echo "C:\\tools\\freepascal\\bin\\i386-win32" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Free Pascal Compiler (brew)
        if: (runner.os == 'macOS') && (github.event.inputs.fpc == 'system')
        run: |
          brew update
          brew install fpc

      - name: Install Free Pascal Compiler (GitHub Action)
        if: github.event.inputs.fpc == 'setup-fpc'
        uses: visualdoj/setup-fpc@v0.1.11-beta

      - name: Print FPC version
        run: fpc -i

      - name: Get FPC sources
        working-directory: "${{ github.workspace }}"
        run: git clone --branch "${{ github.event.inputs.git_branch }}" "${{ github.event.inputs.git_url }}" src

      - name: Copy FPC source before it will be polluted
        working-directory: "${{ github.workspace }}/src"
        run: git checkout-index --prefix="${{ github.workspace }}/bundle/src/" -a

      - name: Copy binutils (Windows)
        if: runner.os == 'Windows'
        working-directory: "${{ github.workspace }}/bundle"
        run: |
          mkdir installed
          mkdir installed\bin
          mkdir installed\bin\i386-win32
          cp C:\tools\freepascal\bin\i386-win32\* installed\bin\i386-win32\

      - name: Build FPC
        working-directory: "${{ github.workspace }}/src"
        run: make build OPT="${{ github.event.inputs.fpc_opt }}"

      - name: Install FPC
        working-directory: "${{ github.workspace }}/src"
        run: make install PREFIX="${{ github.workspace }}/bundle/installed"

      - name: Generate info
        working-directory: "${{ github.workspace }}/bundle"
        run: |
            mkdir info
            fpc -i >info/fpc-version.txt

      - name: Tar the bundle
        working-directory: "${{ github.workspace }}"
        run: tar -czvf bundle.tar.gz bundle/*

      - name: Upload the bundle
        uses: actions/upload-artifact@v3
        with:
          name: "${{ github.event.inputs.bundle_name }}.tar.gz"
          path: "${{ github.workspace }}/bundle.tar.gz"

      - name: Upload the bundle to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          asset_name: "${{ github.workspace }}/fpc-bundle-${{ github.event.inputs.os }}.tar.gz"
          file: "${{ github.workspace }}/bundle.tar.gz"
          file_glob: true

  Build-Bundle-Cross:
    name: "Build FPC cross compilers"
    if: github.event.inputs.cross_compilers != ''
    needs: Build-Bundle
    runs-on: ${{ github.event.inputs.os }}

    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
            path: repository

      - name: Download FPC bundle
        uses: actions/download-artifact@v3
        id: download
        with:
            name: "${{ github.event.inputs.bundle_name }}.tar.gz"
            path: "${{ github.workspace }}"

      - name: Install GNU Core Utils (choco)
        if: runner.os == 'Windows'
        run: |
          choco install gnuwin32-coreutils.install
          make --version

      - name: List files
        working-directory: "${{ github.workspace }}"
        run: ls -R

      - name: Untar the bundle
        working-directory: "${{ github.workspace }}"
        run: |
            tar zxvf bundle.tar.gz
            mv bundle fpc

      - name: Get binutils
        if: runner.os == 'Windows'
        working-directory: "${{ github.workspace }}"
        run: git clone "https://gitlab.com/freepascal.org/fpc/binaries.git" fpc-binaries

      - name: Add FPC to PATH (Windows)
        if: runner.os == 'Windows'
        run: |
            mkdir "${{ github.workspace }}\\tempbin"
            echo  "${{ github.workspace }}\\tempbin" >> $GITHUB_PATH
            echo  "${{ github.workspace }}\\fpc\\installed\\bin\\i386-win32" >> $GITHUB_PATH
            ls "${{ github.workspace }}/fpc/installed/bin/i386-win32"

      - name: Add FPC to PATH (non-windows)
        if: runner.os != 'Windows'
        run: |
            mkdir "${{ github.workspace }}/tempbin"
            echo  "${{ github.workspace }}/tempbin" >> $GITHUB_PATH
            echo  "${{ github.workspace }}/fpc/installed/bin" >> $GITHUB_PATH
            echo  "${{ github.workspace }}/fpc/installed/lib/fpc/${{ github.event.inputs.fpc_version }}" >> $GITHUB_PATH

      - name: Copy cross tools
        if: runner.os != 'Windows'
        run: |
            cp -r ${{ github.workspace }}/repository/src/cross/* ${{ github.workspace }}/fpc/installed/bin/
            ls -la ${{ github.workspace }}/repository/src/cross/*
            ls -la ${{ github.workspace }}/fpc/installed/bin/*

      - name: Print FPC version
        run: fpc -i

      - name: Create cross bundle
        working-directory: "${{ github.workspace }}"
        run: |
            mkdir bundle-cross
            cp -r fpc/* bundle-cross/

      - name: Copy binutils (Windows)
        if: runner.os == 'Windows'
        working-directory: "${{ github.workspace }}/fpc-binaries/i386-win32"
        run: git checkout-index --prefix="${{ github.workspace }}/bundle-cross/installed/bin/i386-win32/" -a

      - name: Setup binutils PATH (Windows)
        if: runner.os == 'Windows'
        run: echo ${{ github.workspace }}\fpc-binaries\i386-win32 | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Android NDK (choco)
        if: runner.os == 'Windows'
        run: |
          choco install android-ndk --params="'/InstallationPath:${{ github.workspace }}\Android\'"
          ls ${{ github.workspace }}\Android\
          refreshenv

      - name: Build FPC cross compiler (Windows to android)
        if: always() && (runner.os == 'Windows')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            set PATH=%PATH%;${{ github.workspace }}\Android\android-ndk-r23b\toolchains\arm-linux-androideabi-4.6\prebuilt\windows\bin
            make clean crossall crossinstall OS_TARGET=android CPU_TARGET=arm CROSSOPT="-Cparmv7a -Cfvfpv3" INSTALL_PREFIX="${{ github.workspace }}/bundle-cross/installed"

      - name: Build FPC cross compiler (Windows to win64)
        if: always() && (runner.os == 'Windows')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=win64 CPU_TARGET=x86_64 PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=win64 CPU_TARGET=x86_64 PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "win64-x86_64" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (win64 to win32)
        if: false && (runner.os == 'Windows')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=win32 CPU_TARGET=i386 PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=win32 CPU_TARGET=i386 PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "win32-i386" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Windows to x86_64-linux)
        if: always() && (runner.os == 'Windows')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=x86_64 PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=x86_64 PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-x86_64" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      #
      # https://wiki.freepascal.org/WebAssembly/Compiler
      #
      - name: Install llvm (choco)
        if: always() && (runner.os == 'Windows')
        working-directory: "${{ github.workspace }}"
        run: |
            choco install llvm --params="'/InstallationPath:${{ github.workspace }}\llvm\'"
            mklink ${{ github.workspace }}/tempbin/wasm32-wasi-wasm-ld.exe     ${{ github.workspace }}/llvm/wasm-ld.exe
            mklink ${{ github.workspace }}/tempbin/wasm32-embedded-wasm-ld.exe ${{ github.workspace }}/llvm/wasm-ld.exe

      - name: Build FPC cross compiler (Windows to wasi-wasm32)
        if: always() && (runner.os == 'Windows')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=wasi CPU_TARGET=wasm32 PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=wasi CPU_TARGET=wasm32 PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "wasi-wasm32" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Windows to embedded-wasm)
        if: always() && (runner.os == 'Windows')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=embedded CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=embedded CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "embedded-wasm" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to linux-i386)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=i386 PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=i386 PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-i386" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to linux-arm)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=arm PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=arm PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-arm" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to linux-aarch64)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=aarch64 PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=aarch64 PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-aarch64" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to linux-powerpc)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=powerpc PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=powerpc PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-powerpc" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to linux-powerpc64)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=powerpc64 PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=powerpc64 PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-powerpc64" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to linux-sparc)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=sparc PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=sparc PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-sparc" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to linux-mips)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=mips PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=mips PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-mips" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to linux-mipsel)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=mipsel PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=mipsel PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-mipsel" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to linux-riscv)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=linux CPU_TARGET=riscv PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=linux CPU_TARGET=riscv PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "linux-riscv" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to embedded-riscv)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=embedded CPU_TARGET=riscv PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=embedded CPU_TARGET=riscv PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "embedded-riscv" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Install llvm (apt-get)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            sudo apt-get install lld-12
            ln -sf /usr/lib/llvm-12/bin/wasm-ld "${{ github.workspace }}/tempbin/wasm32-wasi-wasm-ld"
            ln -sf /usr/lib/llvm-12/bin/wasm-ld "${{ github.workspace }}/tempbin/wasm32-embedded-wasm-ld"

      - name: Build FPC cross compiler (Linux to embedded-wasm)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=embedded CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=embedded CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "embedded-wasm" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to wasi-wasm)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=wasi CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=wasi CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "wasi-wasm" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to win32)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=win32 CPU_TARGET=i386 PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=win32 CPU_TARGET=i386 PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "win32-i386" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (Linux to win64)
        if: always() && (runner.os == 'Linux')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=win64 CPU_TARGET=x86_64 PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=win64 CPU_TARGET=x86_64 PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "win64-x86_64" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Install llvm (ports)
        if: always() && (runner.os == 'macOS')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            brew update
            brew install llvm@11
            ln -sf /opt/local/bin/wasm-ld-mp-11 "${{ github.workspace }}/tempbin/wasm32-wasi-wasm-ld"
            ln -sf /opt/local/bin/wasm-ld-mp-11 "${{ github.workspace }}/tempbin/wasm32-embedded-wasm-ld"

      - name: Build FPC cross compiler (macOS to embedded-wasm)
        if: always() && (runner.os == 'macOS')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=embedded CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=embedded CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "embedded-wasm" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Build FPC cross compiler (macOS to wasi-wasm)
        if: always() && (runner.os == 'macOS')
        working-directory: "${{ github.workspace }}/fpc/src"
        run: |
            make clean all    OS_TARGET=wasi CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed" OPT="${{ github.event.inputs.fpc_opt }}"
            make crossinstall OS_TARGET=wasi CPU_TARGET=wasm PREFIX="${{ github.workspace }}/bundle-cross/installed"
            echo "wasi-wasm" >>"${{ github.workspace }}/bundle-cross/info/cross-list.txt"

      - name: Tar the cross bundle
        if: always()
        working-directory: "${{ github.workspace }}"
        run: tar -zcvf bundle-cross.tar.gz bundle-cross/*

      - name: Upload the cross bundle
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: "${{ github.event.inputs.bundle_name }}-cross.tar.gz"
          path: "${{ github.workspace }}/bundle-cross.tar.gz"

      - name: Upload the cross bundle to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          asset_name: "${{ github.workspace }}/fpc-bundle-${{ github.event.inputs.os }}-cross.tar.gz"
          file: "${{ github.workspace }}/bundle-cross.tar.gz"
          file_glob: true
