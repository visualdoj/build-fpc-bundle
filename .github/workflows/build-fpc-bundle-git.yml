name: Build FPC bundle from GIT
run-name: "${{ inputs.os }}"

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'GitHub environment (e.g. ubuntu-latest, windows-latest, macos-latest)'
        required: true
      fpc:
        description: 'Compiler version ("system" is for installing FPC from packet manager)'
        required: false
        default: 'setup-fpc'
      fpc_opt:
        description: 'Additional options for build process'
        required: false
        default: ''
      git_url:
        description: 'GIT url of sources'
        required: false
        default: 'https://gitlab.com/freepascal.org/fpc/source.git'
      git_branch:
        description: 'Branch'
        required: false
        default: 'main'
      bundle_name:
        description: 'Bundle name'
        required: false
        default: 'bundle'
      cross_compilers:
        description: 'Build cross compilers'
        required: false
        default: 'true'
      fpc_version:
        description: 'FPC version'
        required: false
        default: '3.2.3'
  workflow_call:
    inputs:
      os:
        description: 'GitHub environment (e.g. ubuntu-latest, windows-latest, macos-latest)'
        type: string
        required: true
      fpc:
        description: 'Compiler version ("system" is for installing FPC from packet manager)'
        type: string
        required: false
        default: 'setup-fpc'
      fpc_opt:
        description: 'Additional options for build process'
        type: string
        required: false
        default: ''
      git_url:
        description: 'GIT url of sources'
        type: string
        required: false
        default: 'https://gitlab.com/freepascal.org/fpc/source.git'
      git_branch:
        description: 'Branch'
        type: string
        required: false
        default: 'main'
      bundle_name:
        description: 'Bundle name'
        type: string
        required: false
        default: 'bundle'
      cross_compilers:
        description: 'Build cross compilers'
        type: string
        required: false
        default: 'true'
      fpc_version:
        description: 'FPC version'
        type: string
        required: false
        default: '3.2.3'

jobs:
  Build-Bundle:
    name: "Build FPC for ${{ inputs.os }} from ${{ inputs.git_url }}"
    runs-on: ${{ inputs.os }}
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Install Free Pascal Compiler (apt-get)
        if: (runner.os == 'Linux') && (inputs.fpc == 'system')
        run: sudo apt-get install fpc

      - name: Install Free Pascal Compiler (choco)
        if: (runner.os == 'Windows') && (inputs.fpc == 'system')
        run: |
          choco install freepascal --yes

      - name: Workaround for missing PATH settings (choco)
        if: (runner.os == 'Windows') && (inputs.fpc == 'system')
        run: |
          ls "C:\\tools\\freepascal"
          ls "C:\\tools\\freepascal\\bin"
          ls "C:\\tools\\freepascal\\bin\\i386-win32"
          echo "C:\\tools\\freepascal\\bin\\i386-win32" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Free Pascal Compiler (brew)
        if: (runner.os == 'macOS') && (inputs.fpc == 'system')
        run: |
          brew update
          brew install fpc

      - name: Install Free Pascal Compiler (GitHub Action)
        if: inputs.fpc == 'setup-fpc'
        uses: visualdoj/setup-fpc@main

      - name: Print FPC version
        run: fpc -i

      - name: Get FPC sources
        working-directory: "${{ github.workspace }}"
        run: git clone --branch "${{ inputs.git_branch }}" "${{ inputs.git_url }}" fpc_src

      - name: Copy FPC source before it will be polluted
        working-directory: "${{ github.workspace }}/fpc_src"
        run: git checkout-index --prefix="${{ github.workspace }}/bundle/src/" -a

      - name: Copy binutils (Windows)
        if: runner.os == 'Windows'
        working-directory: "${{ github.workspace }}"
        run: |
          mkdir installed
          mkdir installed\bin
          mkdir installed\bin\i386-win32
          git clone "https://gitlab.com/freepascal.org/fpc/binaries.git" fpc-binaries
          cd fpc-binaries && git checkout-index --prefix="${{ github.workspace }}/bundle/installed/bin/" -a

      - run: make --version

      - name: Build FPC
        working-directory: "${{ github.workspace }}/fpc_src"
        run: make build install OPT="${{ inputs.fpc_opt }}" PREFIX="${{ github.workspace }}/bundle/installed"

      - name: Copy gnu programs to fpc bin (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
            cp -r bin/i386-win32/* bundle/installed/bin/i386-win32/

      - name: fpc.cfg (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
             "${{ github.workspace }}\\bundle\\installed\\bin\\i386-win32\\fpcmkcfg.exe" -d basepath='$FPC_INSTALLED_DIR$' -o "${{ github.workspace }}/bundle/fpc.cfg"

      - name: fpc.cfg (non-Windows)
        if: runner.os != 'Windows'
        run: fpcmkcfg -d basepath="\$FPC_INSTALLED_DIR\$/lib/fpc/\$FPCVERSION\$" -o "${{ github.workspace }}/bundle/fpc.cfg"

      - name: Generate info
        working-directory: "${{ github.workspace }}/bundle"
        run: |
            mkdir info
            fpc -i >info/fpc-version.txt

      - name: Tar the bundle
        working-directory: "${{ github.workspace }}"
        run: tar -czvf "bundle-${{ runner.os }}.tar.gz" bundle/*

      - name: Upload the bundle
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.bundle_name }}.tar.gz"
          path: "${{ github.workspace }}/bundle-${{ runner.os }}.tar.gz"

      - name: Upload the bundle to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          asset_name: "fpc-bundle-${{ runner.os }}.tar.gz"
          file: "${{ github.workspace }}/bundle-${{ runner.os }}.tar.gz"
          file_glob: true

  Build-Bundle-Cross:
    name: "Build FPC cross compilers"
    needs: Build-Bundle
    if: inputs.cross_compilers != ''
    runs-on: ${{ inputs.os }}

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Download FPC bundle
        uses: actions/download-artifact@v3
        id: download
        with:
            name: "${{ inputs.bundle_name }}.tar.gz"
            path: "${{ github.workspace }}"

      - name: Untar the bundle
        working-directory: "${{ github.workspace }}"
        run: |
            tar zxvf "bundle-${{ runner.os }}.tar.gz"
            mv bundle fpc

      - name: Get binutils
        if: runner.os == 'Windows'
        working-directory: "${{ github.workspace }}"
        run: git clone "https://gitlab.com/freepascal.org/fpc/binaries.git" fpc-binaries

      - name: Add FPC to PATH (non-windows)
        if: runner.os != 'Windows'
        run: |
            echo  "${{ github.workspace }}/fpc/installed/bin" >> $GITHUB_PATH
            echo  "${{ github.workspace }}/fpc/installed/lib/fpc/${{ inputs.fpc_version }}" >> $GITHUB_PATH

      - name: Copy cross tools
        if: runner.os != 'Windows'
        run: |
            cp -r ${{ github.workspace }}/src/cross/* ${{ github.workspace }}/fpc/installed/bin/
            ls -la ${{ github.workspace }}/src/cross/*
            ls -la ${{ github.workspace }}/fpc/installed/bin/*

      - name: Create cross bundle
        working-directory: "${{ github.workspace }}"
        run: |
            mkdir bundle-cross
            cp -r fpc/* bundle-cross/

      - name: List files
        working-directory: "${{ github.workspace }}"
        run: ls -R

      - name: Setup fpc binaries PATH (Windows)
        if: runner.os == 'Windows'
        run: |
            echo "${{ github.workspace }}\\fpc-binaries\\i386-win32" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            make --version

      - run: echo "Built crosscompilers:" >>$GITHUB_STEP_SUMMARY

      - name: x86_64-win64
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: x86_64
          target_os:  win64
          opt: "${{ inputs.fpc_opt }}"

      - name: i386-win32
        if: always() && (runner.os != 'Windows')
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: i386
          target_os:  win32
          opt: "${{ inputs.fpc_opt }}"

      - name: arm-android
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: arm
          target_os:  android
          crossopt: "-Cparmv7a -Cfvfpv3"
          opt: "${{ inputs.fpc_opt }}"

      - name: i386-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: i386
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: x86_64-linux
        if: always() && (runner.os != 'Linux')
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: x86_64
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: arm-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: arm
          target_os:  linux
          opt: "-dFPC_ARMEL ${{ inputs.fpc_opt }}"

      - name: aarch64-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: aarch64
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: avr-embedded
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: avr
          target_os:  embedded
          opt: "SUBARCH=avr35 ${{ inputs.fpc_opt }}"

      - name: m68k-atari
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: m68k
          target_os:  atari
          opt: "${{ inputs.fpc_opt }}"

      - name: powerpc-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: powerpc
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: powerpc64-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: powerpc64
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: sparc-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: sparc
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: sparc64-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: sparc64
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: mips-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: mips
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: mipsel-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: mipsel
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: riscv64-linux
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: riscv64
          target_os:  linux
          opt: "${{ inputs.fpc_opt }}"

      - name: wasm32-embedded
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: wasm32
          target_os:  embedded
          opt: "BINUTILSPREFIX= OPT=\"-O-\" PP=fpc ${{ inputs.fpc_opt }}"

      - name: wasm32-wasi
        if: always()
        uses: ./.github/actions/make-fpc-cross
        with:
          target_cpu: wasm32
          target_os:  wasi
          opt: "BINUTILSPREFIX= OPT=\"-O-\" PP=fpc ${{ inputs.fpc_opt }}"

      - name: Tar the cross bundle
        if: always()
        working-directory: "${{ github.workspace }}"
        run: tar -czvf "bundle-${{ runner.os }}-cross.tar.gz" bundle-cross/*

      - name: Upload the cross bundle
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.bundle_name }}-cross.tar.gz"
          path: "${{ github.workspace }}/bundle-${{ runner.os }}-cross.tar.gz"

      - name: Upload the cross bundle to release
        if: always() && startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          asset_name: "fpc-bundle-${{ runner.os }}-cross.tar.gz"
          file: "${{ github.workspace }}/bundle-${{ runner.os }}-cross.tar.gz"
          file_glob: true
