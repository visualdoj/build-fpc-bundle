name: Build FPC bundle from GIT
run-name: "${{ inputs.os }}"

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'GitHub environment (e.g. ubuntu-latest, windows-latest, macos-latest)'
        required: true
      fpc:
        description: 'Compiler version ("system" is for installing FPC from packet manager)'
        required: false
        default: 'setup-fpc'
      fpc_opt:
        description: 'Additional options for build process'
        required: false
        default: ''
      git_url:
        description: 'GIT url of sources'
        required: false
        default: 'https://gitlab.com/freepascal.org/fpc/source.git'
      git_branch:
        description: 'Branch'
        required: false
        default: 'main'
      bundle_name:
        description: 'Bundle name'
        required: false
        default: 'bundle'
      fpc_version:
        description: 'FPC version'
        required: false
        default: '3.2.3'
      cross:
        description: 'Which cross crompilers build'
        required: false
        default: 'all'
  workflow_call:
    inputs:
      os:
        description: 'GitHub environment (e.g. ubuntu-latest, windows-latest, macos-latest)'
        type: string
        required: true
      fpc:
        description: 'Compiler version ("system" is for installing FPC from packet manager)'
        type: string
        required: false
        default: 'setup-fpc'
      fpc_opt:
        description: 'Additional options for build process'
        type: string
        required: false
        default: ''
      git_url:
        description: 'GIT url of sources'
        type: string
        required: false
        default: 'https://gitlab.com/freepascal.org/fpc/source.git'
      git_branch:
        description: 'Branch'
        type: string
        required: false
        default: 'main'
      bundle_name:
        description: 'Bundle name'
        type: string
        required: false
        default: 'bundle'
      fpc_version:
        description: 'FPC version'
        type: string
        required: false
        default: '3.2.3'
      cross:
        description: 'Which cross crompilers build'
        type: string
        required: false
        default: 'all'

jobs:
  Init:
    name: Init
    if: inputs.cross != ''
    runs-on: ${{ inputs.os }}
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      matrix2: ${{ steps.generate-matrix2.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id:  generate-matrix
        shell: bash
        run: |
            echo "matrix=$(python src/generate-matrix.py --host ${{ runner.os }} --cross ${{ inputs.cross }} --matrix matrix.json)" >>$GITHUB_OUTPUT
            cat $GITHUB_OUTPUT
      - id:  generate-matrix2
        shell: bash
        run:|
            echo "matrix2=$(cat matrix.json | awk '{print}' ORS='')" >>$GITHUB_OUTPUT
            cat $GITHUB_OUTPUT

  Build-Bundle:
    name: "Host"
    needs: Init
    runs-on: ${{ inputs.os }}
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Install Free Pascal Compiler (apt-get)
        if: (runner.os == 'Linux') && (inputs.fpc == 'system')
        run: sudo apt-get install fpc

      - name: Install Free Pascal Compiler (choco)
        if: (runner.os == 'Windows') && (inputs.fpc == 'system')
        run: |
          choco install freepascal --yes

      - name: Workaround for missing PATH settings (choco)
        if: (runner.os == 'Windows') && (inputs.fpc == 'system')
        run: |
          ls "C:\\tools\\freepascal"
          ls "C:\\tools\\freepascal\\bin"
          ls "C:\\tools\\freepascal\\bin\\i386-win32"
          echo "C:\\tools\\freepascal\\bin\\i386-win32" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Free Pascal Compiler (brew)
        if: (runner.os == 'macOS') && (inputs.fpc == 'system')
        run: |
          brew update
          brew install fpc

      - name: Install Free Pascal Compiler (GitHub Action)
        if: inputs.fpc == 'setup-fpc'
        uses: visualdoj/setup-fpc@main

      - name: Print FPC version
        run: fpc -i

      - name: Get FPC sources
        working-directory: "${{ github.workspace }}"
        run: git clone --branch "${{ inputs.git_branch }}" "${{ inputs.git_url }}" fpc_src

      - name: Copy FPC source before it will be polluted
        working-directory: "${{ github.workspace }}/fpc_src"
        run: git checkout-index --prefix="${{ github.workspace }}/bundle/src/" -a

      - name: Copy binutils (Windows)
        if: runner.os == 'Windows'
        working-directory: "${{ github.workspace }}"
        run: |
          mkdir installed
          mkdir installed\bin
          mkdir installed\bin\i386-win32
          git clone "https://gitlab.com/freepascal.org/fpc/binaries.git" fpc-binaries
          cd fpc-binaries && git checkout-index --prefix="${{ github.workspace }}/bundle/installed/bin/" -a

      - run: make --version

      - name: Build FPC
        working-directory: "${{ github.workspace }}/fpc_src"
        run: make build install OPT="${{ inputs.fpc_opt }}" PREFIX="${{ github.workspace }}/bundle/installed"

      - name: Copy gnu programs to fpc bin (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
            cp -r bin/i386-win32/* bundle/installed/bin/i386-win32/

      - name: fpc.cfg (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
             "${{ github.workspace }}\\bundle\\installed\\bin\\i386-win32\\fpcmkcfg.exe" -d basepath='$FPC_INSTALLED_DIR$' -o "${{ github.workspace }}/bundle/fpc.cfg"

      - name: fpc.cfg (non-Windows)
        if: runner.os != 'Windows'
        run: fpcmkcfg -d basepath="\$FPC_INSTALLED_DIR\$/lib/fpc/\$FPCVERSION\$" -o "${{ github.workspace }}/bundle/fpc.cfg"

      - name: Generate info
        working-directory: "${{ github.workspace }}/bundle"
        run: |
            mkdir info
            fpc -i >info/fpc-version.txt

      - name: Tar the bundle
        working-directory: "${{ github.workspace }}"
        run: tar -czvf "${{ inputs.bundle_name }}.tar.gz" bundle/*

      - name: Upload the bundle
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.bundle_name }}.tar.gz"
          path: "${{ github.workspace }}/${{ inputs.bundle_name }}.tar.gz"

      - name: Upload the bundle to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          asset_name: "${{ inputs.bundle_name }}.tar.gz"
          file: "${{ github.workspace }}/${{ inputs.bundle_name }}.tar.gz"
          file_glob: true

  Build-Cross:
    name: "Cross"
    needs: [Build-Bundle]
    if: inputs.cross != ''
    runs-on: ${{ inputs.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.Init.outputs.matrix) }}

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Download FPC bundle
        uses: actions/download-artifact@v3
        id: download
        with:
            name: "${{ inputs.bundle_name }}.tar.gz"
            path: "${{ github.workspace }}"

      - name: Untar the bundle
        working-directory: "${{ github.workspace }}"
        run: |
            tar zxvf "${{ inputs.bundle_name }}.tar.gz"
            mv bundle fpc

      - name: Add FPC to PATH (non-windows)
        if: runner.os != 'Windows'
        run: |
            echo  "${{ github.workspace }}/fpc/installed/bin" >> $GITHUB_PATH
            echo  "${{ github.workspace }}/fpc/installed/lib/fpc/${{ inputs.fpc_version }}" >> $GITHUB_PATH

      - name: Copy cross tools
        if: runner.os != 'Windows'
        run: |
            cp -r ${{ github.workspace }}/src/cross/* ${{ github.workspace }}/fpc/installed/bin/

      - name: Create cross bundle
        working-directory: "${{ github.workspace }}"
        run: |
            mkdir bundle-cross
            mkdir bundle-cross/installed
            mkdir bundle-cross/info

      - name: List files
        working-directory: "${{ github.workspace }}"
        run: ls -R

      - name: "${{ matrix.cpu }}-${{ matrix.os }}"
        id: prerequisites
        uses: ./.github/actions/setup-cross-prerequisites
        with:
          target_cpu: ${{ matrix.cpu }}
          target_os:  ${{ matrix.os }}
          opt:        ${{ matrix.opt }}
          crossopt:   ${{ matrix.crossopt }}
          make_opt:   ${{ matrix.make_opt }}

      - if: (success() || failure()) && (runner.os == 'Windows')
        id: windows_path
        shell: bash
        run: echo "path=$(cat PATH.txt)" >>$GITHUB_OUTPUT

      - if: (success() || failure()) && (runner.os == 'Windows')
        working-directory: "${{ github.workspace }}/fpc/src"
        shell: bash
        run: |
             "${{ github.workspace }}\\fpc\\installed\\bin\\i386-win32\\make.exe" clean all crossinstall CPU_TARGET=${{ matrix.cpu }} OS_TARGET=${{ matrix.os }} PREFIX="${{ github.workspace }}\\bundle-cross\\installed" CROSSOPT="${{ matrix.crossopt }}" OPT="${{ matrix.opt }} ${{inputs.fpc_opt}}" PATH="${{ steps.windows_path.outputs.path }}" ${{ matrix.make_opt }}
             echo "${{ matrix.cpu }}-${{ matrix.os }}" >"${{ github.workspace }}\bundle-cross\info\cross-list.txt"
      
      - if: (success() || failure()) && (runner.os != 'Windows')
        working-directory: "${{ github.workspace }}/fpc/src"
        shell: bash
        run: |
             make clean all crossinstall CPU_TARGET=${{ matrix.cpu }} OS_TARGET=${{ matrix.os }} PREFIX="${{ github.workspace }}/bundle-cross/installed" CROSSOPT="${{ matrix.crossopt }}" OPT="${{ matrix.opt }} ${{inputs.fpc_opt}}"
             echo "${{ matrix.cpu }}-${{ matrix.os }}" >"${{ github.workspace }}/bundle-cross/info/cross-list.txt"
      
      - shell: bash
        run: |
             echo >"${{ github.workspace }}/bundle-cross/fpc.cfg"
             echo "# ${{ matrix.cpu  }}-${{ matrix.os  }}" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"
             echo "#IFDEF cpu${{ matrix.cpu }}" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"
             echo "#IFDEF ${{ matrix.os  }}" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"
      
      - shell: bash
        run: |
             echo "#ENDIF" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"
             echo "#ENDIF" >>"${{ github.workspace }}/bundle-cross/fpc.cfg"

      - name: Tar the cross bundle
        working-directory: "${{ github.workspace }}"
        run: tar -czvf "${{ inputs.bundle_name }}-cross-${{ matrix.cpu }}-${{ matrix.os }}.tar.gz" bundle-cross/*

      - name: Upload the cross bundle
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.bundle_name }}-cross-${{ matrix.cpu }}-${{ matrix.os }}.tar.gz"
          path: "${{ github.workspace }}/${{ inputs.bundle_name }}-cross-${{ matrix.cpu }}-${{ matrix.os }}.tar.gz"

      - name: Upload the cross bundle to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          asset_name: "${{ inputs.bundle_name }}-cross-${{ matrix.cpu }}-${{ matrix.os }}.tar.gz"
          file: "${{ github.workspace }}/${{ inputs.bundle_name }}-cross-${{ matrix.cpu }}-${{ matrix.os }}.tar.gz"
          file_glob: true

  Aggregate-Cross:
    name: "Aggregate"
    needs: Build-Cross
    if: (success() || failure()) && (inputs.cross != '')
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - run: ls -R
      - run: make aggregate BUNDLE_NAME=${{ inputs.bundle_name }}

      - name: Upload the bundle
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.bundle_name }}-cross.tar.gz"
          path: "${{ github.workspace }}/${{ inputs.bundle_name }}-cross.tar.gz"

      - name: Upload the bundle to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          asset_name: "${{ inputs.bundle_name }}-cross.tar.gz"
          file: "${{ github.workspace }}/${{ inputs.bundle_name }}-cross.tar.gz"
          file_glob: true
